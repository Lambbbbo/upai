- name: change NETWORK in upyun.cfg
  lineinfile:
    dest: /etc/upyun.cfg
    regexp: '^NETWORK='
    line: 'NETWORK="{{ YUN }}"'

- name: source upyun.cfg
  shell: source /etc/upyun.cfg && sed -r -i "s:CentOS:$HOSTNAME:g" /etc/system-release

- name: template network file
  template: src=network.j2 dest=/etc/sysconfig/network

- name: template hosts file
  template: src=hosts.j2 dest=/etc/hosts

- name: template profile file
  template: src=profile.j2 dest=/etc/profile

- name: template upyun.cfg
  template: src=upyun.cfg.j2 dest=/etc/upyun.cfg

- name: modify hostname
  shell: hostname {{ inventory_hostname }}

- name: modify crond
  lineinfile: dest=/etc/cron.d/upyun line='1 1 * * * root (/usr/sbin/tmpwatch -m -af 720 /disk/ssd1/logs/upstats_volume)'

- name: change dns when mainland
  lineinfile:
    dest: /network.info
    regexp: '^DNS='
    line: 'DNS="119.29.29.29 1.2.4.8"'
  when: inventory_hostname.split('-')[0] not in ['NTT','GTT','PCW','SGT'] 

- name: change dns when oversea
  lineinfile:
    dest: /network.info
    regexp: '^DNS='
    line: 'DNS="8.8.8.8"'
  when: inventory_hostname.split('-')[0] in ['NTT','GTT','PCW','SGT']

- name: change bond mode to 2
  shell: sed -i "/^BONDING/s/\(.*eth5|\)0|\(.*\)/\12|\2/" /network.info

- name: check if intel netcard
  shell: dmesg |grep -i eth|grep -iq intel
  register: net_result
  failed_when: "'FAILED' in net_result.stderr"

- name: modify rc.local file
  template: src=rc.local.j2 dest=/etc/rc.d/rc.local mode=0755

- name: config private IP
  shell: ifconfig bond0:0 192.168.{{ ansible_ssh_host.split('.')[2] }}.{{ ansible_ssh_host.split('.')[3] }} netmask 255.255.255.0

- name: check if iommu_off
  shell: cat /boot/grub/grub.cfg | grep 'intel_iommu' &> /dev/null
  register: iommu_result
  failed_when: "'FAILED' in iommu_result.stderr"

- name: add iommu_off to grub
  replace:
    dest: /boot/grub/grub.cfg
    regexp: '(.*KEYTABLE.*)'
    replace: '\1 "intel_iommu=off"'
  when: iommu_result.rc == 1

- name: check if U disk exists
  shell: fdisk -l |grep MB
  register: disk_result
  failed_when: "'FAILED' in disk_result.stderr"

- name: mount U DISK
  shell: mount `fdisk -l | grep MB | awk -F "[ :]+" '{print $2}'`1 /mnt
  register: udisk_result
  failed_when: "'FAILED' in disk_result.stderr"
  when: disk_result.rc == 0

- name: add iommu_off to U DISK grub
  replace:
    dest: /mnt/boot/grub/menu.lst
    regexp: '(.*KEYTABLE.*)'
    replace: '\1 intel_iommu=off'
  when: disk_result.rc == 0 and udisk_result.rc == 0

- name: umount U disk
  shell: umount /mnt
  when: disk_result.rc == 0 and udisk_result.rc == 0

- name: soft link for rc.local
  file: 
    src: /etc/rc.d/rc.local
    dest: /etc/rc.local
    state: link

- name: soft link for python
  file:
    src: /usr/local/bin/python
    dest: /usr/bin/python
    state: link
    force: yes

- name: modify /etc/passwd
  shell: sed -r -i '/^[^root]/s:/bin/bash:/sbin/nologin:g' /etc/passwd

- name: change root password
  raw: echo "bCpSnU0fNAzcxjOCOzX1" | passwd --stdin "root"

- name: modify the console in inittab
  lineinfile:
    dest: /etc/inittab
    regexp: '^id'
    line: 'id:3:initdefault:'

- name: stop unnecessary service
  shell: |
    source /etc/upyun.cfg && for i in /etc/rc3.d/S*;do prog=$(echo `basename $i`|cut -c4-);echo "$SERVICES"|grep -q $prog;[ $? != 0 ] && chkconfig --level 0136 $prog off;done
  register: bad_result
  failed_when: "'FAILED' in bad_result.stderr"

- name: start necessary services
  shell: |
    source /etc/upyun.cfg && df|grep -q mapper
    [ $? = 0 ] && SERVICES=$SERVICES" lvm2-monitor"
    for i in $SERVICES;do [ $i = "local" ] || (chkconfig --level 0136 $i on);done
  register: srv_result
  failed_when: "'FAILED' in srv_result.stderr"

- name: modify selinux step 1
  lineinfile:
    dest: /etc/sysconfig/selinux
    regexp: '^SELINUX='
    line: 'SELINUX=disabled'

- name: modify selinux step 2
  lineinfile:
    dest: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=disabled'

- name: update system library path
  shell: ldconfig 

- name: check the network setting and record it
  shell: "{{ item }}"
  with_items:
    - /usr/bin/hunter > /etc/issue
    - /usr/bin/hunter > /etc/issue.net
    - /usr/bin/hunter > /etc/motd

- name: modify crontab daily
  file: "dest=/etc/cron.daily/{{ item }} state=absent"
  with_items:
    - cups
    - makewhatis.cron
    - mlocate.cron
    - prelink
    - rpm
    - tmpwatch

- name: modify cron hourly
  file: dest=/etc/cron.hourly/mcelog.cron state=absent

- name: modify cron weekly
  file: "dest=/etc/cron.weekly/{{ item }} state=absent"
  with_items:
    - 99-raid-check
    - makewhatis.cron

- name: modify cron.d
  file: dest=/etc/cron.d/sysstat state=absent

- name: change sysctl.conf with bbr
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: '^net.ipv4.tcp_congestion_control='
    line: 'net.ipv4.tcp_congestion_control=bbr'
  when: ansible_kernel.split('-')[0] == "4.9.0"

- name: load kernal parameter
  shell: sysctl -p > /dev/null 2>&1
  ignore_errors: true

- name: change /dev/null
  file: dest=/dev/null mode=0666

- name: modify sshd_config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  with_items:
    - { regexp: '.*UseDNS.*',line: 'UseDNS no'}
    - { regexp: '^#TCPKeepAlive.*',line: 'TCPKeepAlive yes'}
    - { regexp: '^#ClientAliveInterval.*',line: 'ClientAliveInterval 3'}
    - { regexp: '^#MaxAuthTries.*',line: 'MaxAuthTries 3'}

- name: modify ssh port
  shell: source /etc/upyun.cfg && sed -r -i "/^Port/s:.*:Port $SSHD_PORT:" /etc/ssh/sshd_config

- name: check the authorized_keys
  shell: egrep -i -c "kvm|ahua" /root/.ssh/authorized_keys
  register: ssh_result

- name: modify password ssh
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: 'PasswordAuthentication no'
  when: ssh_result.stdout == '3'

- name: check if the time_zone is right
  shell: source /etc/upyun.cfg && grep -w -q $ZONE /etc/sysconfig/clock
  register: time_result
  failed_when: "'FAILED' in time_result.stderr"

- name: modify time_zone
  shell: "{{ item }}"
  with_items: 
    - source /etc/upyun.cfg && sed -r -i "s:ZONE=.*:ZONE=\"$ZONE\":" /etc/sysconfig/clock
    - source /etc/upyun.cfg && cp -a /usr/share/zoneinfo/$ZONE /etc/localtime
  when: time_result.rc == 1

- name: adjust time_zone
  shell: "{{ item }}" 
  with_items:      
    - source /etc/upyun.cfg && sed -r -i "/ntpdate/s:(.*) -o3.*:\1 -o3 0.pool.ntp.org $TIME_SRV):g" /etc/cron.d/upyun
  ignore_errors: true

- name: modify limits.conf delete
  lineinfile:
    dest: /etc/security/limits.conf
    regexp: "{{ item }}"
    state: absent
  with_items:
    - nofile
    - memlock

- name: modify limits.conf insert
  lineinfile:
    dest: /etc/security/limits.conf
    line: "{{ item }}"
  with_items:
    - '* soft nofile 655350'
    - '* hard nofile 655350'
    - '#* soft memlock 104857'
    - '#* hard memlock 104857'

- name: delete lines in blacklist.conf
  shell: sed -r -i "/{{ item }}/d" /etc/modprobe.d/blacklist.conf
  with_items:
    - iptable_nat
    - nf_nat nf_conntrack
    - nf_conntrack_ipv4
    - nf_defrag_ipv4

- name: insert lines in blacklist.conf
  shell: echo "blacklist {{ item }}" >> /etc/modprobe.d/blacklist.conf
  with_items:
    - iptable_nat
    - nf_nat nf_conntrack
    - nf_conntrack_ipv4
    - nf_defrag_ipv4
